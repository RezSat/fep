{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"./index","text":""},{"location":"#fep-flexible-expression-parser","title":"FEP ( Flexible Expression Parser )","text":"<p>This document provides an overview of FEP, a prototype parser designed to handle expressions written in the Mathema programming language. FEP offers a flexible structure that allows for manual construction of Abstract Syntax Trees (ASTs) for various mathematical constructs.</p> <p>Basic Overview will be like this:</p>"},{"location":"#operations","title":"Operations:","text":""},{"location":"#binary-operations","title":"Binary Operations:","text":"<ul> <li>Addition</li> <li>Subtraction</li> <li>Multiplication</li> <li>Division</li> <li>Power</li> </ul>"},{"location":"#logical-operations","title":"Logical Operations:","text":"<ul> <li>Logical And</li> <li>Logical Or</li> <li>Logical Xor</li> <li>Logical Not</li> </ul>"},{"location":"#unary-operations","title":"Unary Operations:","text":"<ul> <li>Negative</li> <li>Positive</li> </ul>"},{"location":"#other-operations","title":"Other Operations:","text":"<ul> <li>Percentage (on Numbers only)</li> <li>Modulus ( Abs function)</li> <li>Factorial (Numbers only)</li> <li>Parenthesis</li> </ul>"},{"location":"#data-structures","title":"Data Structures:","text":"<ul> <li>Number</li> <li>Symbol</li> <li>Hexadecimal Number</li> <li>Octal Number</li> <li>Binary Number</li> <li>Complex Number</li> <li>Matrix (python list like)</li> <li>Set</li> <li>HashMap</li> </ul>"},{"location":"#other-features","title":"Other Features:","text":"<ul> <li>Function Definition</li> <li>Function Call</li> <li>Variable Assignment</li> <li>Equation</li> <li>Inequalities</li> <li>Support Latin, greek or letter-like characters and other valid math symbols</li> </ul>"},{"location":"Operations/","title":"./overview","text":""},{"location":"Operations/#operations","title":"Operations:","text":""},{"location":"Operations/#binary-operations","title":"Binary Operations:","text":"<ul> <li>Addition</li> <li>Subtraction</li> <li>Multiplication</li> <li>Division</li> <li>Power</li> </ul>"},{"location":"Operations/#logical-operations","title":"Logical Operations:","text":"<ul> <li>Logical And</li> <li>Logical Or</li> <li>Logical Xor</li> <li>Logical Not</li> </ul>"},{"location":"Operations/#unary-operations","title":"Unary Operations:","text":"<ul> <li>Negative</li> <li>Positive</li> </ul>"},{"location":"Operations/#other-operations","title":"Other Operations:","text":"<ul> <li>Percentage (on Numbers only)</li> <li>Modulus ( Abs function)</li> <li>Factorial (Numbers only)</li> <li>Parenthesis</li> </ul>"},{"location":"Operations/binary_operations/","title":"Binary Operations","text":"<p>path : <code>fep/src/nodes/binary_op.py</code></p>"},{"location":"Operations/binary_operations/#addition","title":"Addition","text":"<p>Params: left, right</p> <p>Symbol: <code>+</code></p> <pre><code>class Add(BinaryOperation):\n    def __init__(self, left, right):\n        super().__init__(left=left, op=\"+\", right=right)\n</code></pre>"},{"location":"Operations/binary_operations/#subtraction","title":"Subtraction","text":"<p>Params: left, right</p> <p>Symbol: <code>-</code></p> <pre><code>class Subtract(BinaryOperation):\n    def __init__(self, left, right):\n        super().__init__(left, \"-\", right)\n</code></pre>"},{"location":"Operations/binary_operations/#multiplication","title":"Multiplication","text":"<p>Params: left, right</p> <p>Symbol: <code>*</code></p> <pre><code>class Multiply(BinaryOperation):\n    def __init__(self, left, right):\n        super().__init__(left, \"*\", right)\n</code></pre>"},{"location":"Operations/binary_operations/#division","title":"Division","text":"<p>Params: left, right</p> <p>Symbol: <code>/</code></p> <pre><code>class Divide(BinaryOperation):\n    def __init__(self, left, right):\n        super().__init__(left, \"/\", right)\n</code></pre>"},{"location":"Operations/binary_operations/#power","title":"Power","text":"<p>Params: base, index</p> <p>Symbol: <code>^</code></p> <pre><code>class Power(BinaryOperation):\n    def __init__(self, base, index):\n        super().__init__(base, \"^\", index)\n</code></pre>"},{"location":"Operations/logical_operations/","title":"Logical Operations","text":"<p>path : <code>fep/src/nodes/logical_operators.py</code></p>"},{"location":"Operations/logical_operations/#logical-and","title":"Logical AND","text":"<p>Params: left, right</p> <p>Symbol: <code>and</code></p> <pre><code>class LogicalAnd(LogicalOperator):\n    def __init__(self, left, right):\n        super().__init__(left=left, op=\"and\", right=right)\n</code></pre>"},{"location":"Operations/logical_operations/#logical-or","title":"Logical OR","text":"<p>Params: left, right</p> <p>Symbol: <code>or</code></p> <pre><code>class LogicalOr(LogicalOperator):\n    def __init__(self, left, right):\n        super().__init__(left=left, op=\"or\", right=right)\n</code></pre>"},{"location":"Operations/logical_operations/#logical-xor","title":"Logical XOR","text":"<p>Params: left, right</p> <p>Symbol: <code>xor</code></p> <pre><code>class LogicalXor(LogicalOperator):\n    def __init__(self, left, op, right):\n        super().__init__(left=left, op=\"xor\", right=right)\n</code></pre>"},{"location":"Operations/logical_operations/#logical-not","title":"Logical NOT","text":"<p>Params:  right</p> <p>Symbol: <code>not</code></p> <pre><code>class LogicalNot(LogicalOperator):\n    def __init__(self, right):\n        super().__init__(left=None, op=\"not\", right=right)\n</code></pre>"},{"location":"Operations/other/","title":"Other Operations","text":""},{"location":"Operations/other/#percentage","title":"Percentage","text":"<p>Path: <code>fep/src/nodes/percentage.py</code></p> <p>Params: value</p> <p>Symbol: <code>%</code></p> <p>Examples: <code>20%</code></p> <pre><code>class Percentage(Node):\n    def __init__(self, value):\n        self.value = value\n</code></pre>"},{"location":"Operations/other/#modulus","title":"Modulus","text":"<p>Path: <code>fep/src/nodes/modulus.py</code></p> <p>Params: expr</p> <p>Symbol: <code>|</code> expr <code>|</code></p> <p>Examples: <code>|-2|</code></p> <pre><code>class Modulus(Node):\n    def __init__(self, expr):\n        self.expr = expr\n</code></pre>"},{"location":"Operations/other/#factorial","title":"Factorial","text":"<p>Path: <code>fep/src/nodes/factorial.py</code></p> <p>Params: value</p> <p>Symbol: <code>!</code></p> <p>Examples: <code>5!</code></p> <pre><code>class Factorial(Node):\n    def __init__(self, value):\n        self.value = value\n</code></pre>"},{"location":"Operations/other/#parenthesis","title":"Parenthesis","text":"<p>Path: <code>fep/src/nodes/parenthesis.py</code></p> <p>Params: expr</p> <p>Symbol: <code>(</code> expr <code>)</code></p> <p>Examples: <code>(3+2-6x)</code></p> <pre><code>class Parenthesis(Node):\n    def __init__(self, expr):\n        self.expr = expr\n</code></pre>"},{"location":"Operations/unary_operations/","title":"Unary Operations","text":"<p>path : <code>fep/src/nodes/unary_op.py</code></p>"},{"location":"Operations/unary_operations/#positive","title":"Positive","text":"<p>Params:  right</p> <p>Symbol: <code>+</code></p> <pre><code>class Positive(UnaryOperation):\n    def __init__(self, value):\n        super().__init__(op=\"+\", value=value)\n</code></pre>"},{"location":"Operations/unary_operations/#negative","title":"Negative","text":"<p>Params:  right</p> <p>Symbol: <code>-</code></p> <pre><code>class Negative(UnaryOperation):\n    def __init__(self, value):\n        super().__init__(op=\"-\", value=value)\n</code></pre>"}]}